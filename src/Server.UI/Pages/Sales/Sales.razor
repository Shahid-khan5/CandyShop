@page "/pages/orders"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Sales.Caching
@using CleanArchitecture.Blazor.Application.Features.Sales.DTOs
@using CleanArchitecture.Blazor.Application.Features.Sales.Specifications
@using CleanArchitecture.Blazor.Application.Features.Sales.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Sales.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Sales.Queries.Pagination
@using CleanArchitecture.Blazor.Server.UI.Pages.Sales.Components

@inject IStringLocalizer<Sales> L
@attribute [Authorize(Policy = Permissions.Sales.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             @bind-SelectedItem="_currentDto"
             Hover="true" @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="SaleListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1" />

            <div class="d-flex flex-column justify-end">
                <div class="d-flex gap-1">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary">@ConstantString.Refresh</MudButton>
                       
                       @*  @if (_canDelete)
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!(_selectedItems.Count>0))"
                                       Size="Size.Small"
                                       OnClick="OnDeleteChecked"
                                       IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                        } *@
                        @if (_canExport)
                        {
                            <MudLoadingButton @bind-Loading="_exporting" Variant="Variant.Outlined" Color="Color.Primary"
                                              Label="@ConstantString.Export"
                                              Disabled="@_loading"
                                              StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                              Size="Size.Small"
                                              OnClick="OnExport"
                                              IconColor="Color.Surface">
                                @ConstantString.Export
                            </MudLoadingButton>
                        }
                    </MudHidden>
                </div>
                @if (_canSearch)
                {
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                }

            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <PropertyColumn Property="x => x.StudentName" Title="@L[_currentDto.GetMemberDescription(x=>x.StudentName)]" />
        <PropertyColumn Property="x => x.CustomerName" Title="@L[_currentDto.GetMemberDescription(x=>x.CustomerName)]" />
        <PropertyColumn Property="x => x.CustomerEmail" Title="@L[_currentDto.GetMemberDescription(x=>x.CustomerEmail)]" />
        <PropertyColumn Property="x => x.TotalAmount" Title="@L[_currentDto.GetMemberDescription(x=>x.TotalAmount)]" />
        <PropertyColumn Property="x => x.SaleDate" Title="Date">
            <CellTemplate>
                @FormatDate(context.Item.SaleDate)
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
    </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<SaleDto> _selectedItems = new HashSet<SaleDto>();
    private MudDataGrid<SaleDto> _table = default!;
    private SaleDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    private SalesWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Sales.Search)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Sales.Delete)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Sales.Export)).Succeeded;
    }
    private async Task<GridData<SaleDto>> ServerReload(GridState<SaleDto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<SaleDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(SaleListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        SaleCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    // private async Task OnDelete(SaleDto dto)
    // {
    //     var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Name);
    //     var command = new DeleteSaleCommand(new int[] { dto.Id });
    //     await DialogServiceHelper.ShowDeleteConfirmationDialog(command, ConstantString.DeleteConfirmationTitle, contentText,
    //         async () =>
    //         {
    //             await _table.ReloadServerData();
    //             _selectedItems.Clear();
    //         }
    //     );
    // }

    // private async Task OnDeleteChecked()
    // {
    //     var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
    //     var command = new DeleteSaleCommand(_selectedItems.Select(x => x.Id).ToArray());
    //     await DialogServiceHelper.ShowDeleteConfirmationDialog(command, ConstantString.DeleteConfirmationTitle, contentText,
    //         async () =>
    //         {
    //             await _table.ReloadServerData();
    //             _selectedItems.Clear();
    //         }
    //     );
    // }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportSalesQuery()
            {
                Keyword = Query.Keyword,
                CurrentUser = UserProfile,
                ListView = Query.ListView,
                OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["Sales"]}.xlsx", result.Data, contentType: "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new ImportSalesCommand(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        if (result.Succeeded)
        {
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
        _uploading = false;
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("MMMM d, yyyy");
    }

}
