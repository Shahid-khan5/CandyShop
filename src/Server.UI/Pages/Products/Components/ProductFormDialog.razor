@using CleanArchitecture.Blazor.Server.UI.Components.Fusion
@using MudExtensions
@using RRSTEK.Server.UI.Components
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Size = SixLabors.ImageSharp.Size
@using Image = SixLabors.ImageSharp.Image
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit
@using CleanArchitecture.Blazor.Domain.Common.Enums
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using System.Collections.Immutable

@inject IStringLocalizer<Products> L
@inject IUploadService UploadService

<MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
    <input For="@(() => Model.Id)" @bind-value="Model.Id" type="hidden" />
    <MudGrid Spacing="2" Class="px-3 pb-3">
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="Model.Name" Label="Product Name" Variant="Variant.Outlined"></MudTextField>
            <div class="mt-3">
                <MudTextField T="string" @bind-Value="Model.Description" Label="Description" Variant="Variant.Outlined" Lines="3" />
            </div>
            <div class="mt-3">
                <MudTextField @bind-Value="Model.Brand" Label="Brand Name" Variant="Variant.Outlined"></MudTextField>
            </div>
            <MudGrid Class="pt-3">
                <MudItem xs="12" md="6" Class="pt-3">
                    <MudTextField @bind-Value="Model.CostPrice" Label="Cost Price" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6" Class="pt-3">
                    <MudTextField @bind-Value="Model.SalePrice" Label="Sale Price" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudStack Style="width: 100%">
                <MudFileUpload T="IBrowserFile"
                               @ref="@_fileUpload"
                               OnFilesChanged="@(e => OnInputFileChanged(e))"
                               AppendMultipleFiles
                               Hidden="@false"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                               InputStyle="opacity:0"
                               tabindex="-1"
                               @ondrop="@ClearDragClass"
                               @ondragenter="@SetDragClass"
                               @ondragleave="@ClearDragClass"
                               @ondragend="@ClearDragClass">
                    <ActivatorContent>
                        <MudPaper Height="200px"
                                  Outlined="true"
                                  Class="@_dragClass"
                                  Style="display:flex; flex-direction:column; align-items:center; justify-content:center;">
                            <span>
                                @((MarkupString)CustomIcons.ImageDrop)
                            </span>
                            <MudText Class="fs-16 mt-3 text-gray">Drop your image here  or browser jpeg,png are allowed</MudText>
                        </MudPaper>
                    </ActivatorContent>
                </MudFileUpload>

            </MudStack>
            @* <div>
            <MudText Typo="Typo.h6" Class="my-3">Product Gallery</MudText>
            <MudStack Style="width: 100%">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
            @ref="@_fileUpload"
            OnFilesChanged="OnInputFileChanged"
            AppendMultipleFiles
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
            InputStyle="opacity:0"
            tabindex="-1"
            @ondrop="@ClearDragClass"
            @ondragenter="@SetDragClass"
            @ondragleave="@ClearDragClass"
            @ondragend="@ClearDragClass">
            <ActivatorContent>
            <MudPaper Height="150px"
            Outlined="true"
            Class="@_dragClass"
            Style="display:flex; flex-direction:column; align-items:center; justify-content:center;">
            <span>
            @((MarkupString)CustomIcons.ImageDrop)
            </span>
            <MudText Class="fs-16 mt-3 text-gray">Drop your image here  or browser jpeg,png are allowed</MudText>
            </MudPaper>
            </ActivatorContent>
            </MudFileUpload>

            </MudStack>
            </div> *@

        </MudItem>
    </MudGrid>
</MudForm>
<MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
@* <MudLoadingButton Loading="@_saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton> *@
<MudButton Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudButton>


@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired][Parameter] public AddEditProductCommand Model { get; set; } = default!;

    [Parameter] public Action? Refresh { get; set; }

    private List<string> Tags { get; set; } = new List<string>();

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-1 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private IBrowserFile File = null;
    private MudFileUpload<IBrowserFile>? _fileUpload;

    private MudForm? _form;
    private bool _saving;
    private bool _saveingnew;
    private bool _uploading;

    private const long MaxAllowedSize = 3145728;

    // private async Task DeleteImage(ProductImage picture)
    private async Task DeleteImage()
    {
        // if (Model.Pictures != null)
        // {
        //     var parameters = new DialogParameters<ConfirmationDialog>
        //     {
        //         { x => x.ContentText, $"{L["Are you sure you want to erase this image?"]}" }
        //     };
        //     var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true};
        //     var dialog = DialogService.Show<ConfirmationDialog>($"{L["Erase imatge"]}", parameters, options);
        //     var state = await dialog.Result;

        //     if (state is not null && !state.Canceled)
        //     {
        //         Model.Pictures.Remove(picture);
        //     }
        // }
    }

    // private async Task PreviewImage(string url, IEnumerable<ProductImage> images)
    // {
    //     await new Fancybox(JS).Preview(url, images);
    // }

    private async Task UploadPhoto(IBrowserFile file)
    {
        var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgStream = new MemoryStream();
        await filestream.CopyToAsync(imgStream);
        imgStream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgStream))
            {
                image.Mutate(
                    i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(128, 128) }));
                image.Save(outStream, PngFormat.Instance);
                var filename = file.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, UploadType.Product, outStream.ToArray()));
                Model.PictureUrl = result;
                Model.PictureName = filename;
                Model.PictureSize = outStream.Length;
                //Do your validations here
                Snackbar.Add(ConstantString.UploadSuccess, Severity.Info);
            }
        }
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        File = e.File;
        // ClearDragClass();
    }

    private void SetDragClass()
    => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);

            if (!_form!.IsValid)
                return;

            if (File != null)
            {
                await UploadPhoto(File);
            }
            var result = await Mediator.Send(Model);

            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }

    private async Task SaveAndNew()
    {
        try
        {
            _saveingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(Model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                Refresh?.Invoke();
                Model = new AddEditProductCommand();
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saveingnew = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}