@page "/pages/request"
@using ActualLab.Fusion
@using CleanArchitecture.Blazor.Application.Features.Campaigns.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Campaigns.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Campaigns.DTOs
@using CleanArchitecture.Blazor.Application.Features.Campaigns.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.UserActivation
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users
@using CleanArchitecture.Blazor.Server.UI.Pages.Products.Components
@using CleanArchitecture.Blazor.Server.UI.Services.Fusion
@using Microsoft.AspNetCore.WebUtilities
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Features.Identity.DTOs
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.ResetPassword
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.SendWelcome
@using System.Security.Claims
@using System.Text
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant
@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Roles.Components
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Components
@using System.ComponentModel
@using System.Linq.Expressions
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using System.Reflection
@using CleanArchitecture.Blazor.Infrastructure.Constants.ClaimTypes
@using System.Security.Cryptography
@using ZiggyCreatures.Caching.Fusion

@attribute [Authorize(Policy = Permissions.Users.View)]
@inherits OwningComponentBase
@implements IDisposable
@inject IUsersStateContainer UsersStateContainer
@inject IOnlineUserTracker OnlineUserTracker
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IUserService UserService
@inject ITenantService TenantsService
@inject IFusionCache FusionCache;
@inject IExcelService ExcelService
@inject IMailService MailService
@inject IMapper Mapper
@inject IStringLocalizer<Users> L
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Users> Logger

<PageTitle>Requests</PageTitle>

<MudDataGrid 
    @ref=MudGrid
             FixedHeader="true"
             FixedFooter="false"
             Height="calc(100vh - 231px)"
             Hover="true"
             T="CampaignDto"
             MultiSelection="true"
             Loading="@_loading"
             ServerData="@(ServerReload)">
    <ToolBarContent>
        <div class="d-flex justify-space-between  align-center w-100" >
            <MudText Typo="Typo.h6">Request</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" />
        </div>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Class Name"/>
        <PropertyColumn Property="x => x.StudentName" Title="Student Name" />
        <PropertyColumn Property="x => x.StartDate" Title="Date"/>
        <PropertyColumn Property="x => x.Email" Title="Student Email"/>
        <PropertyColumn Property="x => x.ContactNo" Title="Contact No" />
    
        <TemplateColumn Title="Action" T="CampaignDto">
            <CellTemplate>
                <MudStack Row="true">
                    <MudButton Size="@Size.Small" OnClick="@(()=>OnAccept(context.Item))" Variant="@Variant.Filled" Color="@Color.Tertiary" Class="me-3">Accept</MudButton>
                    <MudButton Size="@Size.Small" OnClick="@(()=>OnReject(context.Item))" Variant="@Variant.Filled" Color="@Color.Error">Reject</MudButton>
                    <MudButton Size="@Size.Small" OnClick="@(()=>OnReject(context.Item))" Variant="@Variant.Filled" Color="@Color.Error">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

</MudDataGrid>




@code{
    static string GeneratePassword(int length)
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_-+=<>?";
        StringBuilder result = new StringBuilder(length);
        byte[] randomBytes = new byte[length];

        using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(randomBytes);
        }

        foreach (byte b in randomBytes)
        {
            result.Append(validChars[b % validChars.Length]);
        }

        return result.ToString();
    }
    static string GenerateUserName(int length)
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder result = new StringBuilder(length);
        byte[] randomBytes = new byte[length];

        using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(randomBytes);
        }

        foreach (byte b in randomBytes)
        {
            result.Append(validChars[b % validChars.Length]);
        }

        return result.ToString();
    }
    private bool _loading;
    private MudDataGrid<CampaignDto> MudGrid;
    public async Task OnAccept(CampaignDto campaignDto)
    {
        var pwd = GeneratePassword(15);
        var userName = GenerateUserName(15);

        var user = new ApplicationUser()
            {
                DisplayName = campaignDto.StudentName,
                UserName = userName,
                Email = "haleemzahid35@gmail.com",
                EmailConfirmed = true,
            };
#if DEBUG == false

        var result = await UserManager.CreateAsync(user, pwd);
        string message = "";
        if (!result.Succeeded)
        {
            message = string.Join(" ", result.Errors.Select(error => error.Description));
            return;
        }

        result = await UserManager.AddToRoleAsync(user, RoleName.Admin);
        if (!result.Succeeded)
        {
            message = string.Join(" ", result.Errors.Select(error => error.Description));
            return;
        }
        var query = new AcceptCampaignCommand() { Id = campaignDto.Id };
        await Mediator.Send(query);
        #endif
        await SendCongratsEmail(user.UserName,pwd,user.DisplayName);
        await MudGrid!.ReloadServerData();

    }

    public async Task DeleteAsync()
    {
        var cmd = new DeleteCampaignCommand([campaignDto.Id]);

        await Mediator.Send(cmd);
    }
    public async Task OnReject(CampaignDto campaignDto)
    {
        

        await SendDenyEmail(
#if DEBUG 
"Shahidkhan.dev88@gmail.com",
#else
            campaignDto.Email, 
     #endif       
            campaignDto.StudentName);
        await MudGrid!.ReloadServerData();
    }

    private GetCampaignsRequestQuery Query = new();
    private async Task<GridData<CampaignDto>> ServerReload(GridState<CampaignDto> state)
    {
        try
        {
            _loading = true;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<CampaignDto> { TotalItems = result.Count(), Items = result};
        }
        finally
        {
            _loading = false;
        }
    }

    public async Task SendCongratsEmail(string email, string password, string name)
    {

        var callbackUrl = Navigation.GetUriWithQueryParameters(
          Navigation.ToAbsoluteUri(Login.PageUrl).AbsoluteUri,
          new Dictionary<string, object?> { ["returnUrl"] = "/" });
        await Mediator.Publish(new AcceptCampaignNotification(email, password, callbackUrl, name));
        Logger.LogInformation("{UserName} Activated Successfully!", name);
    }
    public async Task SendDenyEmail(string email, string name)
    {
        await Mediator.Publish(new DenyCampaignNotification(email, name));
        Logger.LogInformation("{UserName} Activated Successfully!", name);
    }


}
<style>
    .mud-table.mud-data-grid.mud-xs-table.mud-table-hover.mud-table-sticky-header.mud-elevation-1 {
        height: calc(100vh - 112px) !important;
    }

    .mud-toolbar.mud-toolbar-gutters.mud-table-toolbar {
        overflow: auto !important;
    }

    .fs-24 {
        font-size: 24px;
    }

    .fw-700 {
        font-weight: 700;
    }

    .mud-table-toolbar {
        height: 60px !important;
    }

    @@media (max-width: 760px) {
        .mud-table.mud-data-grid.mud-xs-table.mud-table-hover.mud-table-sticky-header.mud-elevation-1 {
            height: calc(100vh - 96px) !important;
        }

        .mud-drawer-close-mini-md-left .mud-main-content {
            margin-left: var(--mud-drawer-width-mini-left);
            scroll-padding-top: auto;
            padding-top: 66px;
        }

        .mud-container.mud-container-maxwidth-xl.mud-container--gutters.mb-4.mt-4 {
            padding-bottom: 0 !important;
            margin-bottom: 0 !important;
        }

    }

    .mud-container-maxwidth-xl{
        max-width:100% !important;
    }
    .w-100{
        width:100% !important;
    }
    .mud-button-filled.mud-button-filled-error{
        background:#d92020 !important;
    }

    .mud-button-filled.mud-button-filled-tertiary{
        background:#8ddd86 !important;
    }
</style>