@using MudExtensions
@using RRSTEK.Server.UI.Components
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Size = SixLabors.ImageSharp.Size
@using Image = SixLabors.ImageSharp.Image
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using CleanArchitecture.Blazor.Application.Features.Identity.DTOs
@using CleanArchitecture.Blazor.Domain.Common.Enums
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant
@inherits OwningComponentBase
@inject IValidationService Validator
@inject IUploadService UploadService
@inject ITenantService TenantsService
@inject IStringLocalizer<Users> L

<MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
    <input For="@(() => Model.Id)" @bind-value="Model.Id" type="hidden"/>
    <input For="@(() => Model.ProfilePictureDataUrl)" @bind-value="Model.ProfilePictureDataUrl" type="hidden"/>
     
    <MudGrid Spacing="2">
        <MudItem xs="12" md="6">
           <MudTextField @bind-Value="TextValue" Label="Product Name" Variant="Variant.Outlined"></MudTextField>
            <div class="mt-3">
                <MudTextField T="string" Label="Description" Variant="Variant.Outlined" Text="@sampleText" Lines="3" />
            </div>

            <div class="mt-3">
                <MudTextField @bind-Value="TextValue" Label="Description" Variant="Variant.Outlined"></MudTextField>
            </div>
            <div class="mt-3">
                <MudTextField @bind-Value="TextValue" Label="Brand Name" Variant="Variant.Outlined"></MudTextField>
            </div>
            <MudGrid Class="pt-3">
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="TextValue" Label="SKU" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="TextValue" Label="Stock Quantity" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="6" Class="pt-3">
                <MudTextField @bind-Value="TextValue" Label="Cost Price" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
                <MudItem xs="12" md="6" Class="pt-3">
                <MudTextField @bind-Value="TextValue" Label="Sale Price" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            </MudGrid>
            <div class="mt-2">
        <MudChipField WrapChips=true T="string"  FullWidth="true" 
            Label="ChipField" />
            </div>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudStack Style="width: 100%">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                               @ref="@_fileUpload"
                               OnFilesChanged="OnInputFileChanged"
                                  AppendMultipleFiles
                                Hidden="@false"
                                InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                InputStyle="opacity:0"
                                tabindex="-1"
                                @ondrop="@ClearDragClass"
                                @ondragenter="@SetDragClass"
                                @ondragleave="@ClearDragClass"
                                @ondragend="@ClearDragClass">
                     <ActivatorContent>
                         <MudPaper Height="200px"
                                   Outlined="true"
                                   Class="@_dragClass"
                                   Style="display:flex; flex-direction:column; align-items:center; justify-content:center;">
                             <span>
                                 @((MarkupString)CustomIcons.ImageDrop)
                             </span>
                             <MudText Class="fs-16 mt-3 text-gray">Drop your image here  or browser jpeg,png are allowed</MudText>
                        </MudPaper>
                    </ActivatorContent>
                </MudFileUpload>

            </MudStack>

            <div>
                <MudText Typo="Typo.h6" Class="my-3">Product Gallery</MudText>
                 <MudStack Style="width: 100%">
                     <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                    @ref="@_fileUpload"
                                    OnFilesChanged="OnInputFileChanged"
                                          AppendMultipleFiles
                                    Hidden="@false"
                                    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                    InputStyle="opacity:0"
                                    tabindex="-1"
                                    @ondrop="@ClearDragClass"
                                    @ondragenter="@SetDragClass"
                                    @ondragleave="@ClearDragClass"
                                    @ondragend="@ClearDragClass">
                         <ActivatorContent>
                             <MudPaper Height="150px"
                                       Outlined="true"
                                       Class="@_dragClass"
                                       Style="display:flex; flex-direction:column; align-items:center; justify-content:center;">
                                 <span>
                                     @((MarkupString)CustomIcons.ImageDrop)
                                 </span>
                                 <MudText Class="fs-16 mt-3 text-gray">Drop your image here  or browser jpeg,png are allowed</MudText>
                             </MudPaper>
                         </ActivatorContent>
                     </MudFileUpload>

                 </MudStack>
            </div>

        </MudItem> 
    </MudGrid>
</MudForm>

@code{

#nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-1 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;


    string _delimiter = " ";
    string? _value;
    List<string>? _values;
    int _maxChips = 0;
    int _chipsMaxWidth = 80;
    Color _color = Color.Default;
    Variant _chipVariant = Variant.Filled;
    Variant _variant = Variant.Outlined;
    bool _wrapChips;
    bool _disabled;
    bool _readonly;
    bool _disableRadius;
    bool _closeable = true;
    bool _allowSameValues = false;

    public string TextValue { get; set; }
    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
    public class CheckItem
    {
        public string Key { get; set; } = string.Empty;
        public bool Value { get; set; }
    }
    private RoleManager<ApplicationRole> RoleManager = null!;
    [EditorRequired] [Parameter] public ApplicationUserDto Model { get; set; } = default!;

    [EditorRequired] [Parameter] public EventCallback<ApplicationUserDto> OnFormSubmit { get; set; }


    private MudForm? _form = default!;
    private List<CheckItem> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        RoleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        await GetRoles(Model.TenantId);
    }
    private async Task GetRoles(string? tenantId)
    {
        Roles = new();
        var array = await RoleManager.Roles.Where(x => x.TenantId == Model.TenantId).Select(x => x.Name).ToListAsync();
        foreach (var role in array)
        {
            if (Model.AssignedRoles != null && Model.AssignedRoles.Contains(role))
            {
                Roles.Add(new CheckItem { Key = role!, Value = true });
            }
            else
            {
                Roles.Add(new CheckItem { Key = role!, Value = false });
            }
        }
    }
    private async Task OnTenantIdChanged(string tenantId)
    {
        Model.TenantId = tenantId;
        await GetRoles(Model.TenantId);
    }
    private async Task UploadPhoto(IBrowserFile file)
    {
        var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgStream = new MemoryStream();
        await filestream.CopyToAsync(imgStream);
        imgStream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgStream))
            {
                image.Mutate(
                    i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(128, 128) }));
                image.Save(outStream, PngFormat.Instance);
                var filename = file.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, UploadType.ProfilePicture, outStream.ToArray()));
                Model.ProfilePictureDataUrl = result;
                //Do your validations here
                Snackbar.Add(ConstantString.UploadSuccess, Severity.Info);
            }
        }
    }

    public async Task Submit()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                Model.AssignedRoles = Roles.Where(x => x.Value).Select(x => x.Key).ToArray();
                await OnFormSubmit.InvokeAsync(Model);
            }
        }
    }

}
<style>
    .fs-16{
        font-size:16px !important
    }


    .text-gray{
        color: #70706E !important;
    }


 

</style>