@using System.Security.Claims
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider

<CompositeViewBaseComponent>
    <HeaderView>
        <span class="fw-700 fs-20">@GetTitle()</span>
        <p class="text-gray mb-0">@GetSubtitle()</p>
    </HeaderView>

    <ChildContent>
        @if (UserRole == "Student")
        {
            <ProductListView CampaignId="@CampaignId" />
        }
        else
        {
            <SellerListView CampaignId="@CampaignId" UserRole="@UserRole" />
        }
    </ChildContent>

    <BusyView>
        @if (IsBusy)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </BusyView>
</CompositeViewBaseComponent>

@code {
    private string UserRole { get; set; }
    private bool IsBusy { get; set; }

    [Parameter] public int? CampaignId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        UserRole = GetUserRole(user);
    }

    private string GetUserRole(ClaimsPrincipal user)
    {
        if (user.IsInRole("SuperAdmin")) return "SuperAdmin";
        if (user.IsInRole("Admin")) return "Admin";
        return "Student";
    }

    private string GetTitle() => UserRole == "Student" ? "Top Products" : "Top Sellers";
    private string GetSubtitle() => UserRole == "Student" ? "Information about Most Popular Products" : "Information about Most Top Sellers";
}
