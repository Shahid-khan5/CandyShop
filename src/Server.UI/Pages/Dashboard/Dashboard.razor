@page "/"
@using CleanArchitecture.Blazor.Application.Features.Campaigns.DTOs
@using CleanArchitecture.Blazor.Application.Features.Campaigns.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Dashboard.DTOs
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Queries
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Queries.GetCampaignRevenueQuery
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Queries.GetStudentPerformanceQueryHandler
@using CleanArchitecture.Blazor.Application.Features.Dashboard.Queries.GetTopProductSellersQuery

@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using CleanArchitecture.Blazor.Server.UI.Pages.Dashboard.Components
@using MudBlazor.Utilities
@using RRSTEK.Server.UI.Components
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IStringLocalizer<Dashboard> L
@inject IMediator Mediator
<PageTitle>@Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mb-0">
      @if (UserRole == RoleName.SuperAdmin)
        {

    <div class="d-flex  justify-space-between pe-4 pb-1" style=" width:100% !important; padding-left:18px !important; background:#469ec5;">

        <div class="d-flex align-center">
            <MudSelect Variant="Variant.Outlined" T="int?" Value="@SelectedCampaignId" Class="fielter" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@((int?)null)">All Classes</MudSelectItem>
                @foreach (var campaign in Campaigns)
                {
                    <MudSelectItem T="int?" Value="@campaign.Id">@campaign.Name</MudSelectItem>
                }
            </MudSelect>
        </div>
     
    </div>
        }
    <MudGrid Class="pa-4">
        <MudItem xs="12" md="4">
            <MudPaper>
                <MudCardHeader>
                    Total Sales
                </MudCardHeader>
                <MudCardContent Class="d-flex pt-0 justify-space-between">
                    <div>
                        <MudText Typo="Typo.h3" Class="mb-2">401.K </MudText>
                        <span class="text-gray">We have solid 123 items</span>
                    </div>
                    @((MarkupString)CustomIcons.FCProgressBar)
                </MudCardContent>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudPaper>
                <MudCardHeader>
                    Total commission
                </MudCardHeader>
                <MudCardContent Class="d-flex pt-0 justify-space-between">
                    <div>
                        <MudText Typo="Typo.h3" Class="mb-2">$8.2k </MudText>
                        <span class="text-gray">Available to payout</span>
                    </div>
                    @((MarkupString)CustomIcons.SCProgressBar)
                </MudCardContent>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudPaper>
                <MudCardHeader>
                    Total Order
                </MudCardHeader>
                <MudCardContent Class="d-flex pt-0 justify-space-between">
                    <div>
                        <MudText Typo="Typo.h3" Class="mb-2">1300 </MudText>
                        <span class="text-gray">Available to payout</span>
                    </div>
                    @((MarkupString)CustomIcons.TCProgressBar)
                </MudCardContent>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="7">
            <MudPaper Class="pa-4 h-416">
                <span class="fw-700 fs-16">Live Sales Tracker</span>
                <DashboardProfitChart CampaignId="@SelectedCampaignId"></DashboardProfitChart>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4 h-416  overflow-auto">
                <TopSellersComponent CampaignId="@SelectedCampaignId"></TopSellersComponent>
            </MudPaper>


        </MudItem>

        @if (UserRole != RoleName.Users)
        {


            <MudItem xs="12" md="7">
                <MudPaper Class="pa-4">
                    <span class="fw-700 mb-3 d-block fs-16 text-gray">Student Performance</span>
                    <MudDataGrid Items="@Enumerable.Range(0,3)">
                        <Columns>
                            <PropertyColumn Property="x => x" Title="Student Name" />
                            <PropertyColumn Property="x => x" Title="Sales Amount" />
                            <PropertyColumn Property="x => x" Title="Products Sold" />
                            <PropertyColumn Property="x => x" Title="Commission" />
                            <PropertyColumn Property="x => x" Title="Molar mass" />
                            <PropertyColumn Property="x => x" Title="Performance" />
                            <PropertyColumn Property="x => x" Title="Contactss" />
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="5">
                <MudPaper Class="pa-4">
                    <SalesDayLeftCampaignComponent />
                </MudPaper>
            </MudItem>
        }

    </MudGrid>

</MudContainer>

<style>
    .mud-progress-linear.horizontal.mud-progress-linear-medium {
        margin-top: 5px !important;
        margin-bottom: 5px !important;
    }

    .fs-30 {
        font-size: 30px !important;
    }

    .lp-app-grid {
        display: grid;
        gap: 24px;
        grid-template-columns: repeat(auto-fit,minmax(300px,1fr));
    }

    .fs-16 {
        font-size: 16px !important;
    }

    .fs-18 {
        font-size: 16px !important;
    }

    .fw-700 {
        font-weight: 700;
    }

    .fs-24 {
        font-size: 24px !important;
    }

    .fs-20 {
        font-size: 20px !important;
    }

    .fs-14 {
        font-size: 14px !important;
    }

    .fw-500 {
        font-weight: 500;
    }

    .text-center {
        text-align: center;
    }

    App___Copy::after {
        font-size: 24px;
        font-weight: 700;
    }

    .mud-progress-linear.mud-progress-linear-color-info:not(.mud-progress-linear-buffer) .mud-progress-linear-bar {
        background: #FFC029 !important;
    }

    .mud-progress-linear.mud-progress-linear-color-secondary:not(.mud-progress-linear-buffer) .mud-progress-linear-bar {
        background: #FF6B6B !important;
    }

    .mud-progress-linear.mud-progress-linear-color-tertiary:not(.mud-progress-linear-buffer) .mud-progress-linear-bar {
        background: #5F27CD !important;
    }

    .mud-progress-linear.horizontal.mud-progress-linear-medium {
        border-radius: 10px !important;
        overflow: hidden;
    }

    .mud-progress-linear .mud-progress-linear-bars {
        background: #eeeeee !important;
    }

</style>


@code
{
    private readonly bool IsMobile = false;
    public List<ChartSeries> Series { get; set; } = new();
    public string[] XAxisLabels { get; set; } = Array.Empty<string>();
    private string[] YAxisLabels { get; set; } = new string[] { "Revenues", "Commissions" }; // Translated labels
    private List<CampaignRevenueDto> campaignRevenue = new();
    private List<StudentPerformanceDto> studentPerformances = new();
    private List<TopProductSellerDto> topProductSellers = new();
    private DateTime CurrentMonth { get; set; } = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
    private int CurrentYear { get; set; } = DateTime.UtcNow.Year;
    private IEnumerable<CampaignDto> Campaigns { get; set; } = new List<CampaignDto>();
    private int? SelectedCampaignId { get; set; }
    public string Title { get; set; } = "Dashboard";

    protected string ContentClassNames => new CssBuilder("flex-grow-1 flex-shrink-1")
        .AddClass("pa-5", !IsMobile)
        .AddClass("px-8", IsMobile)
        .Build();

    public string UserRole = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Dashboard"];
        await GetCampaignRevenueAsync();
        await GetStudentPerformanceAsync();
        await GetTopProductSellerAsync();
        await LoadCampaigns();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        UserRole = GetUserRole(user);
    }
    private string GetUserRole(ClaimsPrincipal user)
    {
        if (user.IsInRole("SuperAdmin")) return "SuperAdmin";
        if (user.IsInRole("Admin")) return "Admin";
        return "Student";
    }


    private async Task GetCampaignRevenueAsync()
    {
        var query = new GetCampaignRevenueQuery
            {
                StartDate = DateTime.Now.AddYears(-1),
                EndDate = DateTime.Now
            };
        campaignRevenue = await Mediator.Send(query);

        var limitedCampaignRevenue = campaignRevenue
        .OrderByDescending(c => c.TotalRevenue)
        .Take(10)
        .ToList();

        Series = new List<ChartSeries>
        {
        new ChartSeries { Name = "Revenue", Data = limitedCampaignRevenue.Select(c => (double)c.TotalRevenue).ToArray() },
        new ChartSeries { Name = "Commission", Data = limitedCampaignRevenue.Select(c => (double)c.TotalCommission).ToArray() }
        };

        XAxisLabels = limitedCampaignRevenue.Select(r => r.CampaignName.Length > 10 ? r.CampaignName.Substring(0, 10) + "..." : r.CampaignName).ToArray();
    }

    private async Task GetStudentPerformanceAsync()
    {
        var query = new GetStudentPerformanceQuery
            {
                Year = CurrentYear,
                Month = CurrentMonth.Month
            };
        studentPerformances = await Mediator.Send(query);
    }


    private async Task GetTopProductSellerAsync()
    {
        var query = new GetTopProductSellersQuery
            {
                Year = CurrentYear,
                Month = CurrentMonth.Month
            };
        topProductSellers = await Mediator.Send(query);
    }
    private async Task LoadCampaigns()
    {
        var query = new GetAllCampaignsQuery();
        Campaigns = await Mediator.Send(query);
    }
    // public List<ChartSeries> Series = new List<ChartSeries>()
    // {
    //     new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
    //     new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
    //     new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    // };
    // public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

}

<style>

    .mud-chart text {
        font-size: 12px;
        fill: currentColor;
    }

    .mud-chart g text {
        font-size: 10px;
    }

    .custom-color-yellow {
        color: #ffc029;
    }

    .mud-container-maxwidth-xl {
        max-width: 100% !important;
    }

    .mud-container-maxwidth-lg {
        max-width: 100% !important;
    }

    .mud-container.mud-container-maxwidth-xl.mud-container--gutters.mb-4.mt-4 {
        padding-left: 0;
        padding-right: 0;
    }

    .mud-container.mud-container-maxwidth-lg.mud-container--gutters.mb-0 {
        padding-left: 20px;
        padding-right: 20px;
    }

    .bg-gray {
        background-color: #eeeeee !important;
    }

    .mud-chart.mud-chart-legend-bottom {
        padding-right: 15px;
        margin-left: 15px;
        width: 100%;
    }

    .fs-13 {
        font-size: 13px;
    }

    .fw-600 {
        font-weight: 600;
    }

    .text-gray {
        color: #7B7878;
    }

    .border-10 {
        border-radius: 10px !important;
    }

    .mud-container.mud-container-maxwidth-lg.mud-container--gutters.mb-0 {
        padding: 0 !important;
    }

    .w-200 {
        width: 200px !important;
    }

    span.text-white {
        color: white !important;
    }

    .mud-input.mud-input-outlined.mud-input-adorned-end.mud-shrink.mud-typography-input.mud-select-input {
        height: 40px;
    }

    .mud-container.mud-container-maxwidth-xl.mud-container--gutters.mb-4.mt-4 {
        margin-top: 0 !important;
    }

    .fielter {
        filter: brightness(5) !important;
    }

    .mud-input-control.mud-select.w-200.fielter .mud-input > input.mud-input-root-outlined.mud-input-root-adorned-end, div.mud-input-slot.mud-input-root-outlined.mud-input-root-adorned-end {
        color: white !important;
    }

    .h-60 {
        height: 60px !important;
    }

    .h-416 {
        height: 416px !important;
    }

    .fielter:first-child MudMenuItem {
        margin-top: 120px;
    }

    @@madia screen and (max-width:767px) {
        .h-md-100 {
            height: 100% !important;
        }
    }

</style>